import streamlit as st
from datetime import datetime, timedelta
import pandas as pd
from database import (
    fetch_access_counts, 
    fetch_user_activity,
    get_user_email_safely,
    update_user_activity
)

# ====================================================================
# CONFIGURA√á√ÉO GERAL
# ====================================================================

# Define o tempo limite para um usu√°rio ser considerado "Online" (em minutos)
INACTIVITY_THRESHOLD_MINUTES = 5

def format_status(row):
    """
    Calcula se o usu√°rio est√° Online, Inativo ou Offline baseado no √∫ltimo acesso.
    Retorna o status formatado com emoji.
    """
    if pd.isna(row['ultimo_acesso_ativo']):
        return "‚ö™ Offline"
    
    last_access = row['ultimo_acesso_ativo'].to_pydatetime()
    time_difference = datetime.now() - last_access
    
    if time_difference < timedelta(minutes=INACTIVITY_THRESHOLD_MINUTES):
        # Online: √öltimo acesso h√° menos de 5 minutos
        return f"üü¢ Online (em {row['last_access_page']})"
    elif time_difference < timedelta(minutes=60):
        # Inativo: √öltimo acesso entre 5 e 60 minutos
        return f"üü° Inativo (h√° {int(time_difference.total_seconds() // 60)} min)"
    else:
        # Offline: √öltimo acesso h√° mais de 60 minutos
        return f"üî¥ Offline"

def format_timedelta(dt):
    """Formata a diferen√ßa de tempo para exibi√ß√£o amig√°vel."""
    if pd.isna(dt):
        return "N/A"
        
    delta = datetime.now() - dt.to_pydatetime()
    seconds = delta.total_seconds()

    if seconds < 60:
        return f"{int(seconds)} segundos atr√°s"
    elif seconds < 3600:
        minutes = seconds // 60
        return f"{int(minutes)} min atr√°s"
    elif seconds < 86400:
        hours = seconds // 3600
        return f"{int(hours)} horas atr√°s"
    else:
        days = seconds // 86400
        return f"{int(days)} dias atr√°s"

def show_monitor_page():
    user_email = get_user_email_safely()
    user_role = st.session_state['user_role']

    update_user_activity(user_email, user_role, 'monitor')

    col1, col2, col3 = st.columns([1, 5, 1])
    col2.title("üíª Monitor de Atividade & Acessos")
    col2.markdown("---")

    # --- 1. MONITORAMENTO EM TEMPO REAL ---
    col2.header("Status em Tempo Real (Atualiza√ß√£o a cada 10s)")
    
    # Criamos um placeholder para atualizar dinamicamente o status
    realtime_placeholder = st.empty()
    
    # Colocamos a l√≥gica de atualiza√ß√£o dentro do placeholder
    with realtime_placeholder.container():
        
        # O Streamlit connection usa um TTL=10s para cache, garantindo atualiza√ß√£o.
        df_activity = fetch_user_activity()

        if df_activity.empty:
            col2.info("Nenhuma atividade registrada ainda.")
            
        else:
            # Calcula o Status
            df_activity['status'] = df_activity.apply(format_status, axis=1)
            
            # Formata a √∫ltima atividade
            df_activity['√öltima Atividade'] = df_activity['ultimo_acesso_ativo'].apply(format_timedelta)
            
            # Renomeia e seleciona colunas para exibi√ß√£o
            df_display = df_activity[[
                'status', 
                '√öltima Atividade',
                'email', 
                'role', 
                'last_access_page'
            ]].rename(columns={
                'email': 'Usu√°rio',
                'role': 'Fun√ß√£o',
                'last_access_page': 'P√°gina Atual'
            })
            
            # Oculta a coluna original para evitar confus√£o se o usu√°rio expandir
            df_display['P√°gina Atual'] = df_display['P√°gina Atual'].str.title()
            
            # Exibe o Dataframe em tempo real
            col2.dataframe(
                df_display, 
                width="stretch",
                hide_index=True
            )
            
            # M√©tricas r√°pidas
            col1, col2, col3, col4, col5 = st.columns([1, 1.67, 1.67, 1.67, 1])
            col2.metric("Usu√°rios Ativos", df_activity['status'].str.contains("üü¢ Online").sum())
            col3.metric("Usu√°rios Inativos", df_activity['status'].str.contains("üü° Inativo").sum())
            col4.metric("Usu√°rios Registrados", df_activity['email'].nunique())

    col1, col2, col3 = st.columns([1, 5, 1])
    col2.markdown("---")

    # --- 2. HIST√ìRICO GERAL DE ACESSOS ---
    col2.header("Hist√≥rico de Acessos e Estat√≠sticas")

    with st.spinner("Buscando estat√≠sticas de acesso..."):
        df_counts = fetch_access_counts()
    
    if not df_counts.empty:
        # Formata a coluna 'ultimo_acesso' para exibi√ß√£o
        df_counts['ultimo_acesso'] = df_counts['ultimo_acesso'].dt.strftime('%d/%m/%Y %H:%M:%S')
        
        # Renomeia colunas para exibi√ß√£o
        df_counts.rename(columns={
            'email': 'Usu√°rio',
            'role': 'Fun√ß√£o',
            'total_acessos': 'Total de Logins',
            'ultimo_acesso': '√öltimo Login'
        }, inplace=True)

        col2.dataframe(
            df_counts,
            width="stretch",
            hide_index=True
        )
    else:
        col2.warning("Nenhum hist√≥rico de acesso encontrado na tabela 'acessos'.")
        

if __name__ == '__main__':
    # Esta parte s√≥ √© executada se este arquivo for rodado como script principal, 
    # mas em uma aplica√ß√£o multip√°ginas, ele √© acessado via app.py
    show_monitor_page()
