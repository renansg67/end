import streamlit as st
# ‚ö†Ô∏è ASSUMIMOS QUE database.py EXISTE E CONT√âM AS FUN√á√ïES ABAIXO
from database import create_tables, register_access 
from datetime import datetime
import pandas as pd
import sqlite3 # Importa√ß√£o necess√°ria se o database.py usa sqlite3

st.set_page_config(layout="wide")

# Garante que o DB e as tabelas (incluindo 'acessos') existam
create_tables()

def get_user_role(email):
    """Define a role do usu√°rio baseado no e-mail e st.secrets.toml."""
    # L√≥gica de roles - Adapte conforme seu st.secrets
    admin_emails = st.secrets.get("roles", {}).get("admins", [])
    editor_emails = st.secrets.get("roles", {}).get("editors", [])
    
    if email in admin_emails:
        return "admin"
    elif email in editor_emails:
        return "editor"
    else:
        return "viewer"

def get_user_email_safely():
    """Tenta obter o email do usu√°rio logado atrav√©s da API nativa (st.user)."""
    user = st.user
    if user and hasattr(user, 'email'):
        return user.email
    return None

pages = {
    "In√≠cio": [
        st.Page("./inicio/apresentacao.py", title="P√°gina Inicial", icon="‚úàÔ∏è")
    ],
    "Conte√∫do": [
        st.Page("./conteudo/1_materiais_nao_metalicos.py", title="Materiais de Constru√ß√£o n√£o Met√°licos", icon="üß±"),
        st.Page("./conteudo/2_classificacao_madeira_estrutural.py", title="Classifica√ß√£o de Madeira Estrutural", icon="ü™µ"),
        st.Page("./conteudo/3_inspecao_concreto.py", title="Inspe√ß√£o de Concreto", icon="ü™®"),
        st.Page("./conteudo/4_inspecao_de_arvores.py", title="Inspe√ß√£o de √Årvores", icon="üå≥"),
        st.Page("./conteudo/5_matriz_de_rigidez.py", title="Matriz de Rigidez", icon="üìö"),
        st.Page("./conteudo/6_propagacao_de_ondas_acusticas.py", title="Propaga√ß√£o de Ondas Ac√∫sticas", icon=":material/waves:"),
        st.Page("./conteudo/7_atenuacao_de_ondas_acusticas.py", title="Atenua√ß√£o de Ondas Ac√∫sticas", icon="üîä")
    ],
    "Equipamentos": [
        st.Page("./equipamentos/equipamentos.py", title="Equipamentos", icon="üõ†")
    ],
    "Biblioteca": [
        st.Page("./biblioteca/biblioteca.py", title="Biblioteca", icon="üìö")
    ],
    "Empr√©stimos": [
        st.Page("./emprestimos/emprestimos.py", title="Formul√°rio", icon="‚ÑπÔ∏è")
    ],
    "Monitor": [
        st.Page("./monitor/monitor.py", title="Monitor", icon=":material/thumb_up:")
    ]
}

# ----------------------------------------------------
# L√ìGICA DE AUTENTICA√á√ÉO E ROTEAMENTO (FLUXO EST√ÅVEL)
# ----------------------------------------------------

user_email = get_user_email_safely()
col1, col2, col3 = st.columns([1, 3, 1])

if user_email:
    # --- PARTE LOGADA: CONFIGURA√á√ÉO P√ìS-LOGIN ---

    # 1. CONTROLE DE INICIALIZA√á√ÉO DE ESTADO
    
    # Verifica se a sess√£o est√°vel j√° foi alcan√ßada ou se o usu√°rio mudou
    if 'session_initialized' not in st.session_state or st.session_state.get('user_email') != user_email:
        
        user_role = get_user_role(user_email)
        
        # A√ß√£o de Inicializa√ß√£o: S√ì PODE ACONTECER UMA VEZ POR LOGIN
        st.session_state['user_role'] = user_role 
        st.session_state['user_email'] = user_email
        st.session_state['access_registered'] = False # Reseta o registro
        
        # Registro de Acesso
        try:
            register_access(user_email, user_role)
            st.session_state['access_registered'] = True
        except Exception as e:
            print(f"Alerta: Falha ao registrar acesso do usu√°rio {user_email}. Erro: {e}")
            
        # Marca a sess√£o como inicializada
        st.session_state['session_initialized'] = True
        
        # üõë CHAVE FINAL DE CORRE√á√ÉO: For√ßar o RERUN e PARAR a execu√ß√£o
        st.rerun() 
        st.stop() # Garante que o pg.run() n√£o seja chamado na primeira execu√ß√£o n√£o est√°vel.
        
    
    # === 2. EXECU√á√ÉO EST√ÅVEL (Ap√≥s o RERUN e com st.session_state carregado) ===
    
    # Puxa o role e o email do state
    user_role = st.session_state['user_role']
    
    # Componentes de UI √öNICOS: Logout
    if col3.button("Logout :material/logout:", type="secondary", key="main_logout_button"):
        st.session_state.clear() 
        st.logout() 
        st.rerun()

    st.markdown("---") 

    # Implementa√ß√£o da Navega√ß√£o Condicional
    final_pages = {}
    
    for group_name, page_list in pages.items():
        if group_name != "Monitor": 
            final_pages[group_name] = page_list
            
    if user_role == "admin" and "Monitor" in pages:
        final_pages["Monitor"] = pages["Monitor"]
        
    # Roteamento: Chamar a navega√ß√£o e a execu√ß√£o da p√°gina
    pg = st.navigation(final_pages, position="top") 
    pg.run()


else: 
    # --- PARTE DESLOGADA: TELA DE LOGIN ---
    
    # Limpa todo o estado para garantir um novo in√≠cio no pr√≥ximo login
    if 'session_initialized' in st.session_state:
        st.session_state.clear()
        
    # Bot√£o de Login
    if col3.button("Login :material/login:", type="secondary", key="main_login_button"):
        st.login()
        
    # Conte√∫do da Landing Page
    col2.title("üëã Bem-vindo(a) √† Plataforma!")
    
    col1, col2, col3 = st.columns([1, 3, 1])
    col1.image("https://upload.wikimedia.org/wikipedia/commons/thumb/3/3b/Picea_abies_wood_texture.jpg/960px-Picea_abies_wood_texture.jpg", caption="[Image of Wood Texture]")
    col3.info(":material/warning: Por favor, clique no bot√£o **'Login :material/login:'** no canto superior direito para autenticar com sua conta Google e entrar.")
    col3.warning(":material/lock: Este login √© gerenciado com seguran√ßa via sua conta Google (OAuth).")
    col2.image("https://upload.wikimedia.org/wikipedia/commons/8/8d/CVN-69-SPIE-training.jpg", caption="")
